// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Removed unsupported preview features
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Uncomment for connection pooling
  directUrl = env("DIRECT_URL")
}

// Users and Authentication
model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole     @default(AGENT)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  notes         AgentNote[]
  applications  Application[]
  activities    UserActivity[]
  accounts      Account[]
  sessions      Session[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core Educational Entities
model University {
  id          String   @id @default(cuid())
  name        String
  nameUz      String
  logo        String?
  country     String
  city        String?
  website     String?
  description String?   @db.Text
  descriptionUz String? @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]

  @@index([name])
  // Removed fullTextIndex
}

model Course {
  id                String      @id @default(cuid())
  courseName        String
  courseNameUz      String
  description       String?     @db.Text
  descriptionUz     String?     @db.Text
  level             String
  university        University  @relation(fields: [universityId], references: [id])
  universityId      String
  campus            String
  tuitionFee        Decimal     @db.Decimal(10, 2)
  currency          String      @default("GBP")
  selectedIntake    String
  selectedDuration  String
  submissionDeadline DateTime?
  offerTAT          Int?
  expressOffer      Boolean     @default(false)
  modeOfStudy       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  notes             AgentNote[]
  applications      Application[]

  @@index([courseName])
  @@index([level])
  @@index([universityId])
  @@index([expressOffer])
  // Removed fullTextIndex
}

// Application Management
model Application {
  id            String     @id @default(cuid())
  firstName     String
  lastName      String
  email         String
  phone         String?
  status        ApplicationStatus @default(NEW)
  courseId      String
  course        Course     @relation(fields: [courseId], references: [id])
  agentId       String
  agent         User       @relation(fields: [agentId], references: [id])
  notes         String?    @db.Text
  documents     Document[]
  history       ApplicationHistory[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([email])
  @@index([status])
  @@index([courseId])
  @@index([agentId])
  @@index([createdAt])
}

model ApplicationHistory {
  id            String     @id @default(cuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  status        ApplicationStatus
  note          String?    @db.Text
  createdAt     DateTime   @default(now())
  createdBy     String?

  @@index([applicationId])
  @@index([createdAt])
}

// Support Entities
model AgentNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  agentId   String
  agent     User     @relation(fields: [agentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([agentId])
}

model Document {
  id            String    @id @default(cuid())
  name          String
  path          String
  type          String
  size          Int
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([applicationId])
}

model UserActivity {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      ActivityType
  details   String?   @db.Text
  userAgent String?
  ip        String?
  createdAt DateTime  @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([type])
}

// Enums
enum UserRole {
  ADMIN
  AGENT
}

enum ApplicationStatus {
  NEW
  REVIEWING
  PENDING
  ACCEPTED
  REJECTED
  DEFERRED
  WITHDRAWN
}

enum ActivityType {
  SIGN_IN
  SIGN_OUT
  CREATE_COURSE
  UPDATE_COURSE
  DELETE_COURSE
  CREATE_APPLICATION
  UPDATE_APPLICATION
  IMPORT_DATA
  EXPORT_DATA
}